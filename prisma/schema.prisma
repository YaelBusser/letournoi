// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  pseudo        String
  avatarUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth.js fields
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Relations
  tournaments   Tournament[] @relation("OrganizerTournaments")
  teamMembers   TeamMember[]
  registrations TournamentRegistration[]

  @@map("users")
}

// ==========================
// New Enums
// ==========================

enum TournamentFormat {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
}

enum TournamentVisibility {
  PUBLIC
  PRIVATE
}

enum MatchStatus {
  PENDING
  SCHEDULED
  COMPLETED
}

enum TournamentCategory {
  VIDEO_GAMES
  SPORTS
  BOARD_GAMES
}

enum TournamentKind {
  PERSONAL
  PROFESSIONAL
}

enum TournamentStatus {
  DRAFT
  REG_OPEN
  IN_PROGRESS
  COMPLETED
}

// ==========================
// New Models
// ==========================

model Tournament {
  id           String               @id @default(cuid())
  name         String
  description  String?
  game         String?
  format       TournamentFormat     @default(SINGLE_ELIMINATION)
  visibility   TournamentVisibility @default(PUBLIC)
  category     TournamentCategory   @default(VIDEO_GAMES)
  posterUrl    String?
  isTeamBased  Boolean              @default(false)
  maxParticipants Int?
  kind         TournamentKind       @default(PERSONAL)
  teamMinSize  Int?
  teamMaxSize  Int?
  startDate    DateTime?
  endDate      DateTime?
  registrationDeadline DateTime?
  status       TournamentStatus     @default(REG_OPEN)
  organizerId  String
  organizer    User                 @relation("OrganizerTournaments", fields: [organizerId], references: [id], onDelete: Cascade)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  teams        Team[]
  matches      Match[]
  registrations TournamentRegistration[]

  @@map("tournaments")
}

model Team {
  id           String      @id @default(cuid())
  name         String
  tournamentId String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  game         String?
  gameId       String?
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  members      TeamMember[]
  matchesA     Match[]     @relation("TeamA")
  matchesB     Match[]     @relation("TeamB")
  wins         Match[]     @relation("WinnerTeam")

  @@unique([tournamentId, name])
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  isCaptain Boolean  @default(false)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([teamId, userId])
  @@map("team_members")
}

model Match {
  id            String      @id @default(cuid())
  tournamentId  String
  teamAId       String
  teamBId       String
  winnerTeamId  String?
  round         Int?
  status        MatchStatus @default(PENDING)
  scheduledAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  tournament    Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  teamA         Team        @relation("TeamA", fields: [teamAId], references: [id], onDelete: Cascade)
  teamB         Team        @relation("TeamB", fields: [teamBId], references: [id], onDelete: Cascade)
  winnerTeam    Team?       @relation("WinnerTeam", fields: [winnerTeamId], references: [id])

  @@map("matches")
}

model TournamentRegistration {
  id           String   @id @default(cuid())
  tournamentId String
  userId       String
  createdAt    DateTime @default(now())

  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
  @@map("tournament_registrations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
